function main(workbook: ExcelScript.Workbook) {
  let sheet3 = workbook.getWorksheet("Sheet3");
  // Set range A1:L1 on sheet3
  sheet3.getRange("A1:L1").setValues([["Product name", "Product number", "Variant", "Variant number", "Collection", "Folder", "Campaign type", "Value", "Start Date Time", "Stop Date Time", "Sale", "News"]]);
  let selectedSheet = workbook.getActiveWorksheet();

  // Add a new table at range A1:CD99999 on selectedSheet
  let newTable = workbook.addTable(selectedSheet.getRange("A1:CD99999"), true);
  // Table style applied on table newTable
  newTable.setPredefinedTableStyle("TableStyleMedium7");
  let sheet2 = workbook.getWorksheet("Sheet2");
  // Add a new table at range A1:N99999 on sheet2
  let newTable_1 = workbook.addTable(sheet2.getRange("A1:N99999"), true);
  // Table style applied on table newTable_1
  newTable_1.setPredefinedTableStyle("TableStyleMedium7");
  // Insert at range D:D on sheet2, move existing cells right
  sheet2.getRange("D:D").insert(ExcelScript.InsertShiftDirection.right);
  // Set range D1:D2 on sheet2
  sheet2.getRange("D1:D2").setFormulasLocal([["Duplication deletion"], ["=A2&C2"]]);
  // Set fill color to #ffff00 for range D1 on sheet2
  sheet2.getRange("D1").getFormat().getFill().setColor("#ffff00");
  // Set font color to "#FF0000" for range D1 on sheet2
  sheet2.getRange("D1").getFormat().getFont().setColor("#FF0000");
  // Paste to extended range obtained by extending down from range D2 on sheet2 from extended range obtained by extending down from range D2 on sheet2
  sheet2.getRange("D2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(sheet2.getRange("D2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  // Remove duplicates from table newTable_1
  newTable_1.getRange().removeDuplicates([3], true);
  // Delete range D:D on sheet2
  sheet2.getRange("D:D").delete(ExcelScript.DeleteShiftDirection.left);

  // Insert at range C:C on sheet2, move existing cells right
  sheet2.getRange("C:C").insert(ExcelScript.InsertShiftDirection.right);
  // Set range C1:C2 on sheet2
  sheet2.getRange("C1:C2").setFormulasLocal([["Without sizes"], ["=LEFT(B2;11)"]]);
  // Set fill color to #ffff00 for range C1 on sheet2
  sheet2.getRange("C1").getFormat().getFill().setColor("#ffff00");
  // Set font color to "#FF0000" for range C1 on sheet2
  sheet2.getRange("C1").getFormat().getFont().setColor("#FF0000");
  // Paste to extended range obtained by extending down from range C2 on sheet2 from extended range obtained by extending down from range C2 on sheet2
  sheet2.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(sheet2.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  // Insert at range C:C on selectedSheet, move existing cells right
  selectedSheet.getRange("C:C").insert(ExcelScript.InsertShiftDirection.right);
  // Set range C1:C2 on selectedSheet
  selectedSheet.getRange("C1:C2").setFormulasLocal([["Without size"], ["=B2&I2"]]);

  // Paste to extended range obtained by extending down from range C2 on selectedSheet from extended range obtained by extending down from range C2 on selectedSheet
  selectedSheet.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(selectedSheet.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  // Set range A2 on sheet3
  sheet3.getRange("A2").setValue("");
  // Add a new table at range A1:L99999 on sheet3
  let newTable_3 = workbook.addTable(sheet3.getRange("A1:L99999"), true);
  // Table style applied on table newTable_3
  newTable_3.setPredefinedTableStyle("TableStyleMedium7");
  // Set range A2:G2 on sheet3
  sheet3.getRange("A2:G2").setFormulasLocal([["=XLOOKUP(Table2[@[Without sizes]];Sheet1!C:C;Sheet1!E:E;\"Not found\")", "=XLOOKUP(Table2[@[Without sizes]];Sheet1!C:C;Sheet1!B:B;\"Not found\")", "=XLOOKUP(Table2[@[Without sizes]];Sheet1!C:C;Sheet1!G:G;\"Not found\")", "=XLOOKUP(Table2[@[Without sizes]];Sheet1!C:C;Sheet1!I:I;\"Not found\")", "=XLOOKUP(Table2[@[Without sizes]];Sheet1!C:C;Sheet1!R:R;\"Not found\")", "=XLOOKUP(Table2[@[Without sizes]];Sheet1!C:C;Sheet1!Q:Q;\"Not found\")", "percentage"]]);
	// Insert at range C:C on sheet3, move existing cells right
  sheet3.getRange("C:C").insert(ExcelScript.InsertShiftDirection.right);
	// Set range C1:C2 on sheet3
	sheet3.getRange("C1:C2").setFormulasLocal([["Fullish"],["=B2&E2"]]);
	// Set range I2 on sheet3
	sheet3.getRange("I2").setFormulaLocal("=XLOOKUP([@Fullish];Sheet2!C:C;Sheet2!M:M;\"Not found\")")
  sheet3.getRange("I2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(sheet3.getRange("I2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
	// Paste to extended range obtained by extending down from range I2 on selectedSheet from extended range obtained by extending down from range I2 on selectedSheet
	sheet3.getRange("I2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(sheet3.getRange("I2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
	// Delete range C:C on selectedSheet
	sheet3.getRange("C:C").delete(ExcelScript.DeleteShiftDirection.left);
  // Paste to extended range obtained by extending down from range G3 on sheet3 from table newTable_3 cell in row 0 on column Campaign type
  sheet3.getRange("G3").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(newTable_3.getColumn("Campaign type").getRangeBetweenHeaderAndTotal().getRow(0), ExcelScript.RangeCopyType.all, false, false);
 

  // Set range K2:L2 on sheet3
  sheet3.getRange("K2:L2").setValues([["Yes", "No"]]);
  // Paste to extended range obtained by extending right, then down from range K3 on sheet3 from table newTable_3 sub-range with top left corner at row 0 on column Sale
  sheet3.getRange("K3").getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(newTable_3.getColumn("Sale").getRangeBetweenHeaderAndTotal().getRow(0).getResizedRange(0, 1), ExcelScript.RangeCopyType.all, false, false);
  // Paste to extended range obtained by extending right, right, right, then down from range A2 on sheet3 from extended range obtained by extending right, right, right, then down from range A2 on sheet3
  sheet3.getRange("A2").getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(sheet3.getRange("A2").getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.right).getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  // Replace all "% Discount" with "" on range H:H on sheet3
  sheet3.getRange("H:H").replaceAll("% Discount", "", { completeMatch: false, matchCase: false });
  // Replace all "Cycling /" with "" on range F:F on sheet3
  sheet3.getRange("F:F").replaceAll("Cycling / ", "", { completeMatch: false, matchCase: false });
  // Replace all "Snow /" with "" on range F:F on sheet3
  sheet3.getRange("F:F").replaceAll("Snow / ", "", { completeMatch: false, matchCase: false });
  // Rename worksheet to "Campaign upload ready"
  sheet3.setName("Campaign upload ready");
   // Delete worksheet sheet2
  sheet2.delete();




selectedSheet

    // Get the used range in the worksheet (includes data with headers)
    let usedRange: ExcelScript.Range = selectedSheet.getUsedRange();

    // Get the first row (header row) of the used range
    let headerRange: ExcelScript.Range = usedRange.getRow(0);

    // Get the values of the headers in the first row
    let headers: string[] = headerRange.getValues()[0] as string[];

    // List of headers to delete
    let headersToDelete: string[] = [
        "Without size",
        "Product Status - Not possible to import",
        "Variant Status - Not possible to import",   
        "Variant Internal Name",
        "Variant ID",
        "Size Chart",
        "Preorder",
        "Cost/Pcs",
        "Cost currency",
        "Weight",
        "Folder",
        "Measurement Chart",
        "Size Comment",
        "Length",
        "Width",
        "Height",
        "Dimensions Unit",
        "Weight per size",
        "UPC",
        "Internal Comment",
        "Harmonization Code",
        "Harmonization Code Description",
        "Display Status - Not possible to import",
        "Display Comment",
        "Supplier Name",
        "Country of Origin",
        "Country ISO2",
        "Retail - AUD",
        "Retail - CAD",
        "Retail - CHF",
        "Retail - CZK",
        "Retail - DKK",
        "Retail - EUR",
        "Retail - GBP",
        "Retail - JPY",
        "Retail - NOK",
        "Retail - NZD",
        "Retail - PLN",
        "Retail - SEK",
        "Retail - USD",
        "Attribute - Showroom Color Swatch",
        "Attribute - Showroom Custom Tag",
        "Attribute - External engine tax code Prod Avalara (North America Tax) tax code",
        "Attribute - Fit type Fit type",
        "Attribute - Google Merchant g:color",
        "Attribute - Google Merchant g:material",
        "Attribute - Google Merchant g:pattern",
        "Attribute - Google Merchant g:item_group_id",
        "Attribute - Related products title",
        "Total COG",
        "AVG COG",
        "Attribute - Sort order Sort order",
        "EAN",
        "Size Chart",
        "Size",
        "Canonical category",
        "Measurement Chart",
        "Short Description",
        "Description",
        "Meta Title",
        "Meta Description",
        "Meta Keywords",
        "URI",
        "Tax Group",
        "Attribute - Badge",
        "Attribute - Color",
        "Attribute - Fit",
        "Attribute - Google Merchant g:category",
        "Attribute - Google Merchant g:product_type",
        "Attribute - Lens",
        "Attribute - Lens guide type",
        "Attribute - Product benefits Product benefits",
        "Attribute - Size guide type",
        "Attribute - Technical Details Technical detail 1",
        "Attribute - Technical Details Technical detail 2",
        "Attribute - Technical Details Technical detail 3",
        "Attribute - Technical Details Technical detail 4",
        "Attribute - Technical Details Technical detail 5",
        "Attribute - Technical Details Technical detail 6",
        "Attribute - Technical Details Technical detail 7",
        "Attribute - Technical Details Technical detail 8",
        "Attribute - Technical Details Technical detail 9",
        "Attribute - Technical Details Technical detail 10",
        "Attribute - Technical Details Technical detail 11",
        "Attribute - Technical Details Technical detail 12",
    ];

    // Get the total number of rows in the sheet (used range)
    let rowCount: number = usedRange.getRowCount();

    // Loop through the headers array from the end to the beginning to avoid index shifting issues
    for (let i = headers.length - 1; i >= 0; i--) {
        let header = headers[i];

        // If the current header is in the headersToDelete array, delete the column
        if (headersToDelete.includes(header)) {
            // Delete the column at the current index (i)
            selectedSheet.getRangeByIndexes(0, i, rowCount, 1)
                .delete(ExcelScript.DeleteShiftDirection.left);
        }
    }

    // Re-fetch the used range after column deletions
    usedRange = selectedSheet.getUsedRange();
    headerRange = usedRange.getRow(0);
    headers = headerRange.getValues()[0] as string[];



 selectedSheet.getRange("G:G").getFormat().setColumnWidth(26.44);
  // Insert at range C:C on selectedSheet, move existing cells right
  selectedSheet.getRange("C:C").insert(ExcelScript.InsertShiftDirection.right);
  // Set range C1:C2 on selectedSheet
  selectedSheet.getRange("C1:C2").setFormulasLocal([["Fullish"], ["=B2&G2"]]);
  // Paste to extended range obtained by extending down from range C2 on selectedSheet from extended range obtained by extending down from range C2 on selectedSheet
  selectedSheet.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(selectedSheet.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  campaign_upload_ready = workbook.getWorksheet("Campaign upload ready");
  // Insert at range C:C on campaign_upload_ready, move existing cells right
  campaign_upload_ready.getRange("C:C").insert(ExcelScript.InsertShiftDirection.right);
  // Set range C1:C2 on campaign_upload_ready
  campaign_upload_ready.getRange("C1:C2").setFormulasLocal([["Fullish"], ["=B2&E2"]]);
  // Paste to extended range obtained by extending down from range C2 on campaign_upload_ready from extended range obtained by extending down from range C2 on campaign_upload_ready
  campaign_upload_ready.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(campaign_upload_ready.getRange("C2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  // Set range I1:I2 on selectedSheet
  selectedSheet.getRange("L2").setFormulaLocal("=IF(COUNTIF('Campaign upload ready'!C:C;C2) > 0;\"Yes\";\"No\")");
  let table1 = workbook.getTable("Table1");

  selectedSheet.getRange("L2").getExtendedRange(ExcelScript.KeyboardDirection.down).copyFrom(selectedSheet.getRange("L2").getExtendedRange(ExcelScript.KeyboardDirection.down), ExcelScript.RangeCopyType.values, false, false);
  // Apply checked items filter on table table1 column Lookup
  table1.getColumnByName("Column1").getFilter().applyValuesFilter(["Yes"]);
  // Delete range C:C on selectedSheet
  selectedSheet.getRange("C:C").delete(ExcelScript.DeleteShiftDirection.left);
  campaign_upload_ready = workbook.getWorksheet("Campaign upload ready");
  // Delete range C:C on campaign_upload_ready
  campaign_upload_ready.getRange("C:C").delete(ExcelScript.DeleteShiftDirection.left);

}