function main(workbook: ExcelScript.Workbook) {
    const centraSheet = workbook.getWorksheet("Centra export");
    const euSheet = workbook.getWorksheet("EU AX stock");
    const naSheet = workbook.getWorksheet("NA AX stock");
    const apacSheet = workbook.getWorksheet("APAC AX stock");

    if (!centraSheet || !euSheet || !naSheet || !apacSheet) {
        throw new Error("One or more required sheets are missing.");
    }

    const centraData = centraSheet.getUsedRange()?.getValues();
    if (!centraData) return;

    let headers = centraData[0] as string[];
    const skuIndex = headers.indexOf("SKU");
    const variantIndex = headers.indexOf("Variant SKU");
    const sizeIndex = headers.indexOf("Size SKU Suffix");
    const sidneyIndex = headers.indexOf("Sidney");
    const slcIndex = headers.indexOf("Salt Lake City");
    const netherlandsIndex = headers.indexOf("Netherlands");

    if (skuIndex === -1 || variantIndex === -1 || sizeIndex === -1 || sidneyIndex === -1 || slcIndex === -1 || netherlandsIndex === -1) {
        throw new Error("Missing required columns in Centra export sheet.");
    }

    // Add new columns at correct positions
    headers = [...headers];
    headers.splice(sidneyIndex, 0, "APAC AX");
    headers.splice(slcIndex, 0, "NA AX");
    headers.splice(netherlandsIndex, 0, "EU AX");

    const euMap = createLookupMap(getSheetData(euSheet));
    const naMap = createLookupMap(getSheetData(naSheet));
    const apacMap = createLookupMap(getSheetData(apacSheet));

    // Prepare updated data
    const updatedData: string[][] = [headers];

    for (let i = 1; i < centraData.length; i++) {
        const row = [...centraData[i]];
        const key = `${row[skuIndex]}${row[variantIndex]}${row[sizeIndex]}`.trim();

        // Insert values into the correct positions
        row.splice(sidneyIndex, 0, apacMap.get(key) || "");
        row.splice(slcIndex, 0, naMap.get(key) || "");
        row.splice(netherlandsIndex, 0, euMap.get(key) || "");

        updatedData.push(row);
    }

    // Batch write all updated data at once
    centraSheet.getRangeByIndexes(0, 0, updatedData.length, headers.length).setValues(updatedData);

    // Run comparison and formatting
    applyConditionalFormatting(centraSheet);
}

function getSheetData(sheet: ExcelScript.Worksheet): string[][] {
    return sheet.getUsedRange()?.getValues() as string[][] || [];
}

function createLookupMap(data: string[][]): Map<string, string> {
    if (data.length < 2) return new Map();

    const headers = data[0];
    const idIndex = headers.indexOf("product-id");
    const allocationIndex = headers.indexOf("ns1:allocation");

    if (idIndex === -1 || allocationIndex === -1) return new Map();

    return new Map(
        data.slice(1).map(row => [row[idIndex].trim(), row[allocationIndex]?.toString().trim() || ""])
    );
}

function applyConditionalFormatting(sheet: ExcelScript.Worksheet) {
    let range = sheet.getUsedRange();
    let values = range.getValues();

    // Find the column indices
    let headers = values[0];
    let colIndexes = {
        eu: headers.indexOf("EU AX"),
        euCheck: headers.indexOf("Netherlands"),
        na: headers.indexOf("NA AX"),
        naCheck: headers.indexOf("Salt Lake City"),
        apac: headers.indexOf("APAC AX"),
        apacCheck: headers.indexOf("Sidney")
    };

    if (Object.values(colIndexes).includes(-1)) {
        console.log("One or more required columns are missing.");
        return;
    }

    for (let i = 1; i < values.length; i++) { // Start from row 1 to skip headers
        let comparisons = [
            { col1: colIndexes.eu, col2: colIndexes.euCheck },
            { col1: colIndexes.na, col2: colIndexes.naCheck },
            { col1: colIndexes.apac, col2: colIndexes.apacCheck }
        ];

        for (let pair of comparisons) {
            let val1 = values[i][pair.col1]?.toString().trim() || "";
            let val2 = values[i][pair.col2]?.toString().trim() || "";

            let match = (val1 === val2) || (!val1 && !val2);
            let color = match ? "#C6EFCE" : "#FFC7CE"; // Green for match, Red for mismatch

            // Apply formatting to the first column in the pair
            sheet.getCell(i, pair.col1).getFormat().getFill().setColor(color);
        }
    }
}
