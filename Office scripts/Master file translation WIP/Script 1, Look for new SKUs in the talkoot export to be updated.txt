function main(workbook: ExcelScript.Workbook) {
    // Get the sheets
    let proofreadSheets: ExcelScript.Worksheet[] = [
        workbook.getWorksheet("Proofread English"),
        workbook.getWorksheet("Proofread French"),
        workbook.getWorksheet("Proofread German")
    ];
    let masterSheet: ExcelScript.Worksheet = workbook.getWorksheet("MasterFileEnglish");

    if (proofreadSheets.includes(undefined) || !masterSheet) {
        console.log("One or more sheets not found.");
        return;
    }

    // Get the used range for headers
    let masterRange = masterSheet.getUsedRange();
    if (!masterRange) return;

    let masterValues: (string | number | boolean)[][] = masterRange.getValues();
    let masterHeaders: string[] = masterValues[0].map(header => header.toString().trim());

    let masterColIndex: number = masterHeaders.indexOf("Model #/Status");
    
    if (masterColIndex === -1) {
        console.log("Required column 'Model #/Status' not found in master sheet.");
        return;
    }

    // Helper function to clean values
    function cleanValue(value: string | number | boolean): string {
        return value ? value.toString().trim().replace(/\/Project Manager/g, '').trim() : "";
    }

    let masterModelNumbers: string[] = masterValues.slice(1).map(row => cleanValue(row[masterColIndex]));

    proofreadSheets.forEach(sheet => {
        let sheetRange = sheet.getUsedRange();
        if (!sheetRange) return;

        let sheetValues: (string | number | boolean)[][] = sheetRange.getValues();
        let sheetHeaders: string[] = sheetValues[0].map(header => header.toString().trim());
        let sheetModelIndex: number = sheetHeaders.indexOf("Model #/Status");
        let sheetProofreadIndex: number = sheetHeaders.indexOf("Proofread?");

        if (sheetModelIndex === -1) {
            console.log(`Required column 'Model #/Status' not found in ${sheet.getName()}.`);
            return;
        }

        // If 'Proofread?' column doesn't exist, add it at the end
        if (sheetProofreadIndex === -1) {
            sheet.getRangeByIndexes(0, sheetHeaders.length, 1, 1).setValues(["Proofread?"]);
            sheetProofreadIndex = sheetHeaders.length; // Newly added column index
        }

        let existingModels = new Set(sheetValues.slice(1).map(row => cleanValue(row[sheetModelIndex])));
        let firstEmptyRow: number = sheetValues.findIndex((row, index) => index > 0 && !row[sheetModelIndex]);
        if (firstEmptyRow === -1) firstEmptyRow = sheetValues.length;

        masterValues.slice(1).forEach((row) => {
            let modelNumber = cleanValue(row[masterColIndex]);
            if (modelNumber && !existingModels.has(modelNumber)) {
                let newRow: (string | number | boolean)[] = new Array(sheetHeaders.length).fill("");
                
                // Copy matching columns from MasterFileEnglish to Proofread sheet
                masterHeaders.forEach((header, i) => {
                    let proofreadColIndex: number = sheetHeaders.indexOf(header);
                    if (proofreadColIndex !== -1) {
                        newRow[proofreadColIndex] = row[i];
                    }
                });
                
                // Set "Proofread?" column to "No"
                if (sheetProofreadIndex !== -1) {
                    newRow[sheetProofreadIndex] = "No";
                }
                
                sheet.getRangeByIndexes(firstEmptyRow, 0, 1, newRow.length).setValues([newRow]);
                existingModels.add(modelNumber);
                firstEmptyRow++;
            }
        });
    });
}
